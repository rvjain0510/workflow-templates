name: Create Release Branch

on:
  issues:
    types: [opened]

jobs:
  create-release-branch:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Print issue body
        run: |
          echo "Issue Body:"
          echo "${{ github.event.issue.body }}"

      - name: Extract issue information
        id: extract
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "ISSUE_BODY content:"
          echo "$ISSUE_BODY"
          
          # Convert issue body to JSON format
          ISSUE_JSON=$(echo "$ISSUE_BODY" | jq -Rs 'split("\n") | map(select(length > 0)) | map(split(": ")) | map({key: .[0], value: .[1]}) | from_entries')

          # Extracting repository
          REPO=$(echo "$ISSUE_JSON" | jq -r '.["Source Repository"]')
          
          # Extracting source branch
          SOURCE_BRANCH=$(echo "$ISSUE_JSON" | jq -r '.["Source Branch"]')
          
          # Extracting pull request title
          PR_TITLE=$(echo "$ISSUE_JSON" | jq -r '.["Pull Request Title"]')
          
          # Extracting pull request description (includes spaces and lines)
          PR_DESCRIPTION=$(echo "$ISSUE_BODY" | awk '/### Pull Request Description/{flag=1;next}/###/{flag=0}flag' | sed 's/^ *//;s/ *$//')
          
          # Extracting keywords
          EXTRACTED_KEYWORDS=$(echo "$ISSUE_BODY" | awk '/### Which repository you want to push/{flag=1;next}/###/{flag=0}flag' | grep -oP '(?<=\[X\] ).*')
          EXTRACTED_KEYWORDS=$(echo $EXTRACTED_KEYWORDS | xargs)
          
          echo "Extracted Keywords: $EXTRACTED_KEYWORDS"
          echo "Extracted REPO: $REPO"
          echo "Extracted SOURCE_BRANCH: $SOURCE_BRANCH"
          echo "Extracted PR_TITLE: $PR_TITLE"
          echo "Extracted PR_DESCRIPTION: $PR_DESCRIPTION"
          
          # Set environment variables
          echo "SOURCE_REPOSITORY=$REPO" >> $GITHUB_ENV
          echo "SOURCE_BRANCH=$SOURCE_BRANCH" >> $GITHUB_ENV
          echo "PR_TITLE=$PR_TITLE" >> $GITHUB_ENV
          echo "PR_DESCRIPTION=$PR_DESCRIPTION" >> $GITHUB_ENV
          echo "KEYWORDS=$EXTRACTED_KEYWORDS" >> $GITHUB_ENV

      - name: Print extracted variables
        run: |
          echo "SOURCE_REPOSITORY=${{ env.SOURCE_REPOSITORY }}"
          echo "SOURCE_BRANCH=${{ env.SOURCE_BRANCH }}"
          echo "PR_TITLE=${{ env.PR_TITLE }}"
          echo "PR_DESCRIPTION=${{ env.PR_DESCRIPTION }}"
          echo "KEYWORDS=${{ env.KEYWORDS }}"
          
      - name: Set up Git
        run: |
          git config --global credential.helper store
          git config --global user.email "jainrv0510@gmail.com"
          git config --global user.name "rvjain0510"

      - name: Get list of open pull requests
        id: list_prs
        run: |
          curl -H "Authorization: token ${{ secrets.TESTY }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/rvjain0510/test-workflow-dep/pulls?state=open \
               -o pulls.json

          jq -r '.[] | .number' pulls.json | while read pr_number; do
              pr_title=$(curl -s -H "Authorization: token ${{ secrets.TESTY }}" \
                              -H "Accept: application/vnd.github.v3+json" \
                              "https://api.github.com/repos/rvjain0510/test-workflow-dep/pulls/$pr_number" | jq -r '.title')
              pr_body=$(curl -s -H "Authorization: token ${{ secrets.TESTY }}" \
                             -H "Accept: application/vnd.github.v3+json" \
                             "https://api.github.com/repos/rvjain0510/test-workflow-dep/pulls/$pr_number" | jq -r '.body')
              pr_comments=$(curl -s -H "Authorization: token ${{ secrets.TESTY }}" \
                                 -H "Accept: application/vnd.github.v3+json" \
                                 "https://api.github.com/repos/rvjain0510/test-workflow-dep/issues/$pr_number/comments" | jq -r '.[] | "\(.user.login): \(.body)"')

              echo "PR #$pr_number: $pr_title"
              echo "Body: $pr_body"
              echo "Comments: $pr_comments"
          
              # Split keywords by space into an array
              IFS=' ' read -r -a keywords <<< "${{ env.KEYWORDS }}"

              # Check if any keyword is present in the PR title
              keyword_found=false
              for keyword in "${keywords[@]}"; do
                  if [[ "$pr_title" == *"$keyword"* ]]; then
                      echo "PR $pr_number has keyword: $keyword"
                      keyword_found=true
                      break
                  fi
              done
          done

      - name: Create tag
        run: |
          # Clone the source repository
          git clone https://${{ secrets.TESTY }}@github.com/${{ env.SOURCE_REPOSITORY }} trepo
          cd trepo
          # Extract the tag from the YAML file using sed
          TAG=$(sed -n 's/^.*tag: \(.*\)/\1/p' test.yaml | grep ax360-bff)
          echo "Extracted tag: $TAG"
          # Split the tag into components
          IFS='-' read -r NAME VERSION <<< "$TAG"
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          # Increment the patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="$NAME-$MAJOR.$MINOR.$NEW_PATCH"
          echo "New tag: $NEW_TAG"
          # Set environment variables
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create release branch
        run: |
          # Clone the source repository
          git clone https://${{ secrets.TESTY }}@github.com/${{ env.SOURCE_REPOSITORY }} repo
          cd repo
          # Checkout the source branch
          git checkout ${{ env.SOURCE_BRANCH }}
          # Create and checkout the new release branch
          git checkout -b release/${{ env.NEW_TAG }}
          # Push the new branch to origin
          git push origin release/${{ env.NEW_TAG }}
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

      - name: Update tag in YAML file
        run: |
          cd trepo
          git checkout main
          git pull origin main
          git checkout -b qa/${{ env.NEW_TAG }}
          sed -i "s/^.*tag: .*/  tag: ${{ env.NEW_TAG }}/g" test.yaml
          git commit -am "Update tag to ${{ env.NEW_TAG }}"
          git push origin qa/${{ env.NEW_TAG }}

      - name: Create Pull Request
        id: create_pr
        run: |
         cd trepo
         gh pr create --base main --head qa/${{ env.NEW_TAG }} --title "${{ env.PR_TITLE }}" --body "$(cat $GITHUB_WORKSPACE/pr_description.txt)"
         PR_URL=$(gh pr view --json url -q .url)
         echo "PR_URL=$PR_URL" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.TESTY }}

      - name: Comment on Issue with PR Link
        run: |
          ISSUE_NUMBER=${{ github.event.issue.number }}
          PR_URL=${{ env.PR_URL }}
          COMMENT_BODY="The release branch has been created and a pull request has been opened: $PR_URL"
          gh issue comment $ISSUE_NUMBER --body "$COMMENT_BODY"
        env:
          GITHUB_TOKEN: ${{ secrets.TESTY }}
