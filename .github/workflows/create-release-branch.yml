name: Create Release Branch

on:
  issues:
    types: [opened]

jobs:
  create-release-branch:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Print issue body
        run: |
          echo "Issue Body:"
          echo "${{ github.event.issue.body }}"

      - name: Extract issue information
        id: extract
        run: |
          ISSUE_BODY="${{ github.event.issue.body }}"
          echo "ISSUE_BODY content:"
          echo "$ISSUE_BODY"

          # Convert issue body to JSON format
          ISSUE_JSON=$(echo "$ISSUE_BODY" | jq -R -s 'split("\n") | map(select(. != ""))')

          # Extracting repository
          REPO=$(echo "$ISSUE_JSON" | jq -r 'index("### Source Repository") as $idx | .[$idx + 1]')

          # Extracting branch name
          NEW_BRANCH=$(echo "$ISSUE_JSON" | jq -r 'index("### Branch Name") as $idx | .[$idx + 1]')

          # Extracting source branch
          SOURCE_BRANCH=$(echo "$ISSUE_JSON" | jq -r 'index("### Source Branch") as $idx | .[$idx + 1]')

          echo "Extracted REPO: $REPO"
          echo "Extracted NEW_BRANCH: $NEW_BRANCH"
          echo "Extracted SOURCE_BRANCH: $SOURCE_BRANCH"

          # Set environment variables
          echo "SOURCE_REPOSITORY=$REPO" >> $GITHUB_ENV
          echo "BRANCH_NAME=$NEW_BRANCH" >> $GITHUB_ENV
          echo "SOURCE_BRANCH=$SOURCE_BRANCH" >> $GITHUB_ENV

      - name: Print extracted variables
        run: |
          echo "SOURCE_REPOSITORY=${{ env.SOURCE_REPOSITORY }}"
          echo "BRANCH_NAME=${{ env.BRANCH_NAME }}"
          echo "SOURCE_BRANCH=${{ env.SOURCE_BRANCH }}"
          

      - name: Set up Git
        run: |
          git config --global credential.helper store
          git config --global user.email "jainrv0510@gmail.com"
          git config --global user.name "rvjain0510"  

      - name: Create tag
        run: |
          # Clone the source repository
          git clone https://${{ secrets.TESTY }}@github.com/rvjain0510/test-workflow-dep trepo          
          cd trepo

          # Extract the tag from the YAML file using sed
          TAG=$(sed -n 's/^.*tag: \(.*\)/\1/p' test.yaml | grep ax360-bff)
          echo "Extracted tag: $TAG"

          # Split the tag into components
          IFS='-' read -r NAME VERSION <<< "$TAG"
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Increment the patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_TAG="$NAME-$MAJOR.$MINOR.$NEW_PATCH"
          echo "New tag: $NEW_TAG"

          # Set environment variables
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV


      - name: Create release branch
        run: |
          # Clone the source repository
          git clone https://${{ secrets.TESTY }}@github.com/${{ env.SOURCE_REPOSITORY }} repo          
          cd repo

          # Checkout the source branch
          git checkout ${{ env.SOURCE_BRANCH }}

          # Create and checkout the new release branch
          git checkout -b ${{ env.BRANCH_NAME }}

          # Push the new branch to origin
          git push origin ${{ env.BRANCH_NAME }}

          git tag ${{env.NEW_TAG}}

          git push origin ${{env.NEW_TAG}}
          
      - name: Update tag in YAML file
        run: |
          sed -i "s/^.*tag: .*/  tag: ${{ env.NEW_TAG }}/g" test.yaml
          git commit -am "Update tag to ${{ env.NEW_TAG }}"
          git push origin qa/${{ env.NEW_TAG }}
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          title: "Update tag to ${{ env.NEW_TAG }}"
          commit-message: "Update tag to ${{ env.NEW_TAG }}"
          branch: qa/${{ env.NEW_TAG }}
          base: ${{ env.SOURCE_BRANCH }}
          token: ${{ secrets.GITHUB_TOKEN }}    
        env:
          GITHUB_TOKEN: ${{ secrets.TESTY }}
